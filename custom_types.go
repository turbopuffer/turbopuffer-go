// Code generated by turbopuffer-apigen. DO NOT EDIT.

package turbopuffer

import shimjson "github.com/turbopuffer/turbopuffer-go/internal/encoding/json"

type AggregateBy interface {
	sealed_AggregateBy()
}

func (v AggregateByCount) sealed_AggregateBy() {}

type AggregateByCount struct {
}

func NewAggregateByCount() AggregateByCount {
	return AggregateByCount{}
}
func (v AggregateByCount) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		"Count",
	})
}

type Expr interface {
	sealed_Expr()
}

func (v ExprRefNew) sealed_Expr() {}

type ExprRefNew struct {
	refNew string
}

func NewExprRefNew(
	refNew string,
) ExprRefNew {
	return ExprRefNew{
		refNew: refNew,
	}
}
func (v ExprRefNew) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal(map[string]any{
		"$ref_new": v.refNew,
	})
}

type Filter interface {
	sealed_Filter()
}

func (v FilterEq) sealed_Filter()                               {}
func (v FilterNotEq) sealed_Filter()                            {}
func (v FilterIn[T]) sealed_Filter()                            {}
func (v FilterNotIn[T]) sealed_Filter()                         {}
func (v FilterContains) sealed_Filter()                         {}
func (v FilterNotContains) sealed_Filter()                      {}
func (v FilterContainsAny[T]) sealed_Filter()                   {}
func (v FilterNotContainsAny[T]) sealed_Filter()                {}
func (v FilterLt) sealed_Filter()                               {}
func (v FilterLte) sealed_Filter()                              {}
func (v FilterGt) sealed_Filter()                               {}
func (v FilterGte) sealed_Filter()                              {}
func (v FilterAnyLt) sealed_Filter()                            {}
func (v FilterAnyLte) sealed_Filter()                           {}
func (v FilterAnyGt) sealed_Filter()                            {}
func (v FilterAnyGte) sealed_Filter()                           {}
func (v FilterGlob) sealed_Filter()                             {}
func (v FilterNotGlob) sealed_Filter()                          {}
func (v FilterIGlob) sealed_Filter()                            {}
func (v FilterNotIGlob) sealed_Filter()                         {}
func (v FilterRegex) sealed_Filter()                            {}
func (v FilterContainsAllTokens) sealed_Filter()                {}
func (v FilterContainsAllTokensArray) sealed_Filter()           {}
func (v FilterContainsAllTokensWithParams) sealed_Filter()      {}
func (v FilterContainsAllTokensArrayWithParams) sealed_Filter() {}
func (v FilterNot) sealed_Filter()                              {}
func (v FilterAnd) sealed_Filter()                              {}
func (v FilterOr) sealed_Filter()                               {}

type FilterAnd struct {
	filters []Filter
}

func NewFilterAnd(
	filters []Filter,
) FilterAnd {
	return FilterAnd{
		filters,
	}
}
func (v FilterAnd) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		"And",
		v.filters,
	})
}

type FilterAnyGt struct {
	attr  string
	value any
}

func NewFilterAnyGt(
	attr string,
	value any,
) FilterAnyGt {
	return FilterAnyGt{
		attr,
		value,
	}
}
func (v FilterAnyGt) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"AnyGt",
		v.value,
	})
}

type FilterAnyGte struct {
	attr  string
	value any
}

func NewFilterAnyGte(
	attr string,
	value any,
) FilterAnyGte {
	return FilterAnyGte{
		attr,
		value,
	}
}
func (v FilterAnyGte) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"AnyGte",
		v.value,
	})
}

type FilterAnyLt struct {
	attr  string
	value any
}

func NewFilterAnyLt(
	attr string,
	value any,
) FilterAnyLt {
	return FilterAnyLt{
		attr,
		value,
	}
}
func (v FilterAnyLt) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"AnyLt",
		v.value,
	})
}

type FilterAnyLte struct {
	attr  string
	value any
}

func NewFilterAnyLte(
	attr string,
	value any,
) FilterAnyLte {
	return FilterAnyLte{
		attr,
		value,
	}
}
func (v FilterAnyLte) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"AnyLte",
		v.value,
	})
}

type FilterContains struct {
	attr  string
	value any
}

func NewFilterContains(
	attr string,
	value any,
) FilterContains {
	return FilterContains{
		attr,
		value,
	}
}
func (v FilterContains) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Contains",
		v.value,
	})
}

type FilterContainsAllTokens struct {
	attr  string
	value string
}

func NewFilterContainsAllTokens(
	attr string,
	value string,
) FilterContainsAllTokens {
	return FilterContainsAllTokens{
		attr,
		value,
	}
}
func (v FilterContainsAllTokens) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"ContainsAllTokens",
		v.value,
	})
}

type FilterContainsAllTokensArray struct {
	attr  string
	value []string
}

func NewFilterContainsAllTokensArray(
	attr string,
	value []string,
) FilterContainsAllTokensArray {
	return FilterContainsAllTokensArray{
		attr,
		value,
	}
}
func (v FilterContainsAllTokensArray) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"ContainsAllTokens",
		v.value,
	})
}

type FilterContainsAllTokensArrayWithParams struct {
	attr   string
	value  []string
	params ContainsAllTokensFilterParams
}

func NewFilterContainsAllTokensArrayWithParams(
	attr string,
	value []string,
	params ContainsAllTokensFilterParams,
) FilterContainsAllTokensArrayWithParams {
	return FilterContainsAllTokensArrayWithParams{
		attr,
		value,
		params,
	}
}
func (v FilterContainsAllTokensArrayWithParams) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"ContainsAllTokens",
		v.value,
		v.params,
	})
}

type FilterContainsAllTokensWithParams struct {
	attr   string
	value  string
	params ContainsAllTokensFilterParams
}

func NewFilterContainsAllTokensWithParams(
	attr string,
	value string,
	params ContainsAllTokensFilterParams,
) FilterContainsAllTokensWithParams {
	return FilterContainsAllTokensWithParams{
		attr,
		value,
		params,
	}
}
func (v FilterContainsAllTokensWithParams) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"ContainsAllTokens",
		v.value,
		v.params,
	})
}

type FilterContainsAny[T any] struct {
	attr  string
	value []T
}

func NewFilterContainsAny[T any](
	attr string,
	value []T,
) FilterContainsAny[T] {
	return FilterContainsAny[T]{
		attr,
		value,
	}
}
func (v FilterContainsAny[T]) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"ContainsAny",
		v.value,
	})
}

type FilterEq struct {
	attr  string
	value any
}

func NewFilterEq(
	attr string,
	value any,
) FilterEq {
	return FilterEq{
		attr,
		value,
	}
}
func (v FilterEq) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Eq",
		v.value,
	})
}

type FilterGlob struct {
	attr  string
	value string
}

func NewFilterGlob(
	attr string,
	value string,
) FilterGlob {
	return FilterGlob{
		attr,
		value,
	}
}
func (v FilterGlob) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Glob",
		v.value,
	})
}

type FilterGt struct {
	attr  string
	value any
}

func NewFilterGt(
	attr string,
	value any,
) FilterGt {
	return FilterGt{
		attr,
		value,
	}
}
func (v FilterGt) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Gt",
		v.value,
	})
}

type FilterGte struct {
	attr  string
	value any
}

func NewFilterGte(
	attr string,
	value any,
) FilterGte {
	return FilterGte{
		attr,
		value,
	}
}
func (v FilterGte) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Gte",
		v.value,
	})
}

type FilterIGlob struct {
	attr  string
	value string
}

func NewFilterIGlob(
	attr string,
	value string,
) FilterIGlob {
	return FilterIGlob{
		attr,
		value,
	}
}
func (v FilterIGlob) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"IGlob",
		v.value,
	})
}

type FilterIn[T any] struct {
	attr  string
	value []T
}

func NewFilterIn[T any](
	attr string,
	value []T,
) FilterIn[T] {
	return FilterIn[T]{
		attr,
		value,
	}
}
func (v FilterIn[T]) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"In",
		v.value,
	})
}

type FilterLt struct {
	attr  string
	value any
}

func NewFilterLt(
	attr string,
	value any,
) FilterLt {
	return FilterLt{
		attr,
		value,
	}
}
func (v FilterLt) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Lt",
		v.value,
	})
}

type FilterLte struct {
	attr  string
	value any
}

func NewFilterLte(
	attr string,
	value any,
) FilterLte {
	return FilterLte{
		attr,
		value,
	}
}
func (v FilterLte) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Lte",
		v.value,
	})
}

type FilterNot struct {
	filter Filter
}

func NewFilterNot(
	filter Filter,
) FilterNot {
	return FilterNot{
		filter,
	}
}
func (v FilterNot) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		"Not",
		v.filter,
	})
}

type FilterNotContains struct {
	attr  string
	value any
}

func NewFilterNotContains(
	attr string,
	value any,
) FilterNotContains {
	return FilterNotContains{
		attr,
		value,
	}
}
func (v FilterNotContains) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"NotContains",
		v.value,
	})
}

type FilterNotContainsAny[T any] struct {
	attr  string
	value []T
}

func NewFilterNotContainsAny[T any](
	attr string,
	value []T,
) FilterNotContainsAny[T] {
	return FilterNotContainsAny[T]{
		attr,
		value,
	}
}
func (v FilterNotContainsAny[T]) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"NotContainsAny",
		v.value,
	})
}

type FilterNotEq struct {
	attr  string
	value any
}

func NewFilterNotEq(
	attr string,
	value any,
) FilterNotEq {
	return FilterNotEq{
		attr,
		value,
	}
}
func (v FilterNotEq) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"NotEq",
		v.value,
	})
}

type FilterNotGlob struct {
	attr  string
	value string
}

func NewFilterNotGlob(
	attr string,
	value string,
) FilterNotGlob {
	return FilterNotGlob{
		attr,
		value,
	}
}
func (v FilterNotGlob) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"NotGlob",
		v.value,
	})
}

type FilterNotIGlob struct {
	attr  string
	value string
}

func NewFilterNotIGlob(
	attr string,
	value string,
) FilterNotIGlob {
	return FilterNotIGlob{
		attr,
		value,
	}
}
func (v FilterNotIGlob) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"NotIGlob",
		v.value,
	})
}

type FilterNotIn[T any] struct {
	attr  string
	value []T
}

func NewFilterNotIn[T any](
	attr string,
	value []T,
) FilterNotIn[T] {
	return FilterNotIn[T]{
		attr,
		value,
	}
}
func (v FilterNotIn[T]) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"NotIn",
		v.value,
	})
}

type FilterOr struct {
	filters []Filter
}

func NewFilterOr(
	filters []Filter,
) FilterOr {
	return FilterOr{
		filters,
	}
}
func (v FilterOr) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		"Or",
		v.filters,
	})
}

type FilterRegex struct {
	attr  string
	value string
}

func NewFilterRegex(
	attr string,
	value string,
) FilterRegex {
	return FilterRegex{
		attr,
		value,
	}
}
func (v FilterRegex) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"Regex",
		v.value,
	})
}

type RankBy interface {
	sealed_RankBy()
}

func (v RankByVector) sealed_RankBy()                  {}
func (v RankByTextBM25) sealed_RankBy()                {}
func (v RankByTextBM25Array) sealed_RankBy()           {}
func (v RankByTextBM25WithParams) sealed_RankBy()      {}
func (v RankByTextBM25ArrayWithParams) sealed_RankBy() {}
func (v RankByTextSum) sealed_RankBy()                 {}
func (v RankByTextMax) sealed_RankBy()                 {}
func (v RankByTextProduct) sealed_RankBy()             {}
func (v RankByAttribute) sealed_RankBy()               {}

type RankByAttribute struct {
	attr  string
	order RankByAttributeOrder
}

func NewRankByAttribute(
	attr string,
	order RankByAttributeOrder,
) RankByAttribute {
	return RankByAttribute{
		attr,
		order,
	}
}
func (v RankByAttribute) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		v.order,
	})
}

type RankByAttributeOrder string

const (
	RankByAttributeOrderAsc  RankByAttributeOrder = "asc"
	RankByAttributeOrderDesc RankByAttributeOrder = "desc"
)

type RankByText interface {
	sealed_RankByText()
}

func (v RankByTextBM25) sealed_RankByText()                {}
func (v RankByTextBM25Array) sealed_RankByText()           {}
func (v RankByTextBM25WithParams) sealed_RankByText()      {}
func (v RankByTextBM25ArrayWithParams) sealed_RankByText() {}
func (v RankByTextSum) sealed_RankByText()                 {}
func (v RankByTextMax) sealed_RankByText()                 {}
func (v RankByTextProduct) sealed_RankByText()             {}

type RankByTextBM25 struct {
	attr  string
	value string
}

func NewRankByTextBM25(
	attr string,
	value string,
) RankByTextBM25 {
	return RankByTextBM25{
		attr,
		value,
	}
}
func (v RankByTextBM25) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"BM25",
		v.value,
	})
}

type RankByTextBM25Array struct {
	attr  string
	value []string
}

func NewRankByTextBM25Array(
	attr string,
	value []string,
) RankByTextBM25Array {
	return RankByTextBM25Array{
		attr,
		value,
	}
}
func (v RankByTextBM25Array) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"BM25",
		v.value,
	})
}

type RankByTextBM25ArrayWithParams struct {
	attr   string
	value  []string
	params Bm25ClauseParams
}

func NewRankByTextBM25ArrayWithParams(
	attr string,
	value []string,
	params Bm25ClauseParams,
) RankByTextBM25ArrayWithParams {
	return RankByTextBM25ArrayWithParams{
		attr,
		value,
		params,
	}
}
func (v RankByTextBM25ArrayWithParams) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"BM25",
		v.value,
		v.params,
	})
}

type RankByTextBM25WithParams struct {
	attr   string
	value  string
	params Bm25ClauseParams
}

func NewRankByTextBM25WithParams(
	attr string,
	value string,
	params Bm25ClauseParams,
) RankByTextBM25WithParams {
	return RankByTextBM25WithParams{
		attr,
		value,
		params,
	}
}
func (v RankByTextBM25WithParams) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"BM25",
		v.value,
		v.params,
	})
}

type RankByTextMax struct {
	subqueries []RankByText
}

func NewRankByTextMax(
	subqueries []RankByText,
) RankByTextMax {
	return RankByTextMax{
		subqueries,
	}
}
func (v RankByTextMax) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		"Max",
		v.subqueries,
	})
}

type RankByTextProduct struct {
	weight   float64
	subquery RankByText
}

func NewRankByTextProduct(
	weight float64,
	subquery RankByText,
) RankByTextProduct {
	return RankByTextProduct{
		weight,
		subquery,
	}
}
func (v RankByTextProduct) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		"Product",
		v.weight,
		v.subquery,
	})
}

type RankByTextSum struct {
	subqueries []RankByText
}

func NewRankByTextSum(
	subqueries []RankByText,
) RankByTextSum {
	return RankByTextSum{
		subqueries,
	}
}
func (v RankByTextSum) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		"Sum",
		v.subqueries,
	})
}

type RankByVector struct {
	attr  string
	value []float32
}

func NewRankByVector(
	attr string,
	value []float32,
) RankByVector {
	return RankByVector{
		attr,
		value,
	}
}
func (v RankByVector) MarshalJSON() ([]byte, error) {
	return shimjson.Marshal([]any{
		v.attr,
		"ANN",
		v.value,
	})
}
