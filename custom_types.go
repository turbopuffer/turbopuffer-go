// Code generated by turbopuffer-apigen. DO NOT EDIT.

package turbopuffer

import shimjson "github.com/turbopuffer/turbopuffer-go/internal/encoding/json"

type AggregateBy interface {
    sealed_AggregateBy()
}
func (v AggregateByCount) sealed_AggregateBy() {}

type AggregateByCount struct {
    attr string
}
func NewAggregateByCount(
    attr string,
) AggregateByCount {
    return AggregateByCount {
        attr,
    }
}
func (v AggregateByCount) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        "Count",
        v.attr,
    })
}

type ContainsAllTokensArray struct {
    attr string
    value []string
}
func NewContainsAllTokensArray(
    attr string,
    value []string,
) ContainsAllTokensArray {
    return ContainsAllTokensArray {
        attr,
        value,
    }
}
func (v ContainsAllTokensArray) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "ContainsAllTokens",
        v.value,
    })
}

type Filter interface {
    sealed_Filter()
}
func (v FilterEq) sealed_Filter() {}
func (v FilterNotEq) sealed_Filter() {}
func (v FilterIn) sealed_Filter() {}
func (v FilterNotIn) sealed_Filter() {}
func (v FilterLt) sealed_Filter() {}
func (v FilterLte) sealed_Filter() {}
func (v FilterGt) sealed_Filter() {}
func (v FilterGte) sealed_Filter() {}
func (v FilterGlob) sealed_Filter() {}
func (v FilterNotGlob) sealed_Filter() {}
func (v FilterIGlob) sealed_Filter() {}
func (v FilterNotIGlob) sealed_Filter() {}
func (v FilterContainsAllTokens) sealed_Filter() {}
func (v ContainsAllTokensArray) sealed_Filter() {}
func (v FilterNot) sealed_Filter() {}
func (v FilterAnd) sealed_Filter() {}
func (v FilterOr) sealed_Filter() {}

type FilterAnd struct {
    filters []Filter
}
func NewFilterAnd(
    filters []Filter,
) FilterAnd {
    return FilterAnd {
        filters,
    }
}
func (v FilterAnd) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        "And",
        v.filters,
    })
}

type FilterContainsAllTokens struct {
    attr string
    value string
}
func NewFilterContainsAllTokens(
    attr string,
    value string,
) FilterContainsAllTokens {
    return FilterContainsAllTokens {
        attr,
        value,
    }
}
func (v FilterContainsAllTokens) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "ContainsAllTokens",
        v.value,
    })
}

type FilterEq struct {
    attr string
    value any
}
func NewFilterEq(
    attr string,
    value any,
) FilterEq {
    return FilterEq {
        attr,
        value,
    }
}
func (v FilterEq) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "Eq",
        v.value,
    })
}

type FilterGlob struct {
    attr string
    value string
}
func NewFilterGlob(
    attr string,
    value string,
) FilterGlob {
    return FilterGlob {
        attr,
        value,
    }
}
func (v FilterGlob) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "Glob",
        v.value,
    })
}

type FilterGt struct {
    attr string
    value any
}
func NewFilterGt(
    attr string,
    value any,
) FilterGt {
    return FilterGt {
        attr,
        value,
    }
}
func (v FilterGt) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "Gt",
        v.value,
    })
}

type FilterGte struct {
    attr string
    value any
}
func NewFilterGte(
    attr string,
    value any,
) FilterGte {
    return FilterGte {
        attr,
        value,
    }
}
func (v FilterGte) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "Gte",
        v.value,
    })
}

type FilterIGlob struct {
    attr string
    value string
}
func NewFilterIGlob(
    attr string,
    value string,
) FilterIGlob {
    return FilterIGlob {
        attr,
        value,
    }
}
func (v FilterIGlob) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "IGlob",
        v.value,
    })
}

type FilterIn struct {
    attr string
    value any
}
func NewFilterIn(
    attr string,
    value any,
) FilterIn {
    return FilterIn {
        attr,
        value,
    }
}
func (v FilterIn) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "In",
        v.value,
    })
}

type FilterLt struct {
    attr string
    value any
}
func NewFilterLt(
    attr string,
    value any,
) FilterLt {
    return FilterLt {
        attr,
        value,
    }
}
func (v FilterLt) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "Lt",
        v.value,
    })
}

type FilterLte struct {
    attr string
    value any
}
func NewFilterLte(
    attr string,
    value any,
) FilterLte {
    return FilterLte {
        attr,
        value,
    }
}
func (v FilterLte) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "Lte",
        v.value,
    })
}

type FilterNot struct {
    filter Filter
}
func NewFilterNot(
    filter Filter,
) FilterNot {
    return FilterNot {
        filter,
    }
}
func (v FilterNot) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        "Not",
        v.filter,
    })
}

type FilterNotEq struct {
    attr string
    value any
}
func NewFilterNotEq(
    attr string,
    value any,
) FilterNotEq {
    return FilterNotEq {
        attr,
        value,
    }
}
func (v FilterNotEq) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "NotEq",
        v.value,
    })
}

type FilterNotGlob struct {
    attr string
    value string
}
func NewFilterNotGlob(
    attr string,
    value string,
) FilterNotGlob {
    return FilterNotGlob {
        attr,
        value,
    }
}
func (v FilterNotGlob) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "NotGlob",
        v.value,
    })
}

type FilterNotIGlob struct {
    attr string
    value string
}
func NewFilterNotIGlob(
    attr string,
    value string,
) FilterNotIGlob {
    return FilterNotIGlob {
        attr,
        value,
    }
}
func (v FilterNotIGlob) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "NotIGlob",
        v.value,
    })
}

type FilterNotIn struct {
    attr string
    value any
}
func NewFilterNotIn(
    attr string,
    value any,
) FilterNotIn {
    return FilterNotIn {
        attr,
        value,
    }
}
func (v FilterNotIn) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "NotIn",
        v.value,
    })
}

type FilterOr struct {
    filters []Filter
}
func NewFilterOr(
    filters []Filter,
) FilterOr {
    return FilterOr {
        filters,
    }
}
func (v FilterOr) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        "Or",
        v.filters,
    })
}

type RankBy interface {
    sealed_RankBy()
}
func (v RankByVector) sealed_RankBy() {}
func (v RankByTextBM25) sealed_RankBy() {}
func (v RankByTextBM25Array) sealed_RankBy() {}
func (v RankByTextSum) sealed_RankBy() {}
func (v RankByTextMax) sealed_RankBy() {}
func (v RankByTextProduct) sealed_RankBy() {}
func (v RankByAttribute) sealed_RankBy() {}

type RankByAttribute struct {
    attr string
    order RankByAttributeOrder
}
func NewRankByAttribute(
    attr string,
    order RankByAttributeOrder,
) RankByAttribute {
    return RankByAttribute {
        attr,
        order,
    }
}
func (v RankByAttribute) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        v.order,
    })
}

type RankByAttributeOrder string
const (
    RankByAttributeOrderAsc RankByAttributeOrder = "asc"
    RankByAttributeOrderDesc RankByAttributeOrder = "desc"
)

type RankByText interface {
    sealed_RankByText()
}
func (v RankByTextBM25) sealed_RankByText() {}
func (v RankByTextBM25Array) sealed_RankByText() {}
func (v RankByTextSum) sealed_RankByText() {}
func (v RankByTextMax) sealed_RankByText() {}
func (v RankByTextProduct) sealed_RankByText() {}

type RankByTextBM25 struct {
    attr string
    value string
}
func NewRankByTextBM25(
    attr string,
    value string,
) RankByTextBM25 {
    return RankByTextBM25 {
        attr,
        value,
    }
}
func (v RankByTextBM25) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "BM25",
        v.value,
    })
}

type RankByTextBM25Array struct {
    attr string
    value []string
}
func NewRankByTextBM25Array(
    attr string,
    value []string,
) RankByTextBM25Array {
    return RankByTextBM25Array {
        attr,
        value,
    }
}
func (v RankByTextBM25Array) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "BM25",
        v.value,
    })
}

type RankByTextMax struct {
    subqueries []RankByText
}
func NewRankByTextMax(
    subqueries []RankByText,
) RankByTextMax {
    return RankByTextMax {
        subqueries,
    }
}
func (v RankByTextMax) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        "Max",
        v.subqueries,
    })
}

type RankByTextProduct struct {
    weight float64
    subquery RankByText
}
func NewRankByTextProduct(
    weight float64,
    subquery RankByText,
) RankByTextProduct {
    return RankByTextProduct {
        weight,
        subquery,
    }
}
func (v RankByTextProduct) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        "Product",
        []any{
            v.weight,
            v.subquery,
        },
    })
}

type RankByTextSum struct {
    subqueries []RankByText
}
func NewRankByTextSum(
    subqueries []RankByText,
) RankByTextSum {
    return RankByTextSum {
        subqueries,
    }
}
func (v RankByTextSum) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        "Sum",
        v.subqueries,
    })
}

type RankByVector struct {
    attr string
    value []float32
}
func NewRankByVector(
    attr string,
    value []float32,
) RankByVector {
    return RankByVector {
        attr,
        value,
    }
}
func (v RankByVector) MarshalJSON() ([]byte, error) {
    return shimjson.Marshal([]any{
        v.attr,
        "ANN",
        v.value,
    })
}

